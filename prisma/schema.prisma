generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Apartment {
  price              Int
  lockState          String
  location           String
  id                 Int                 @id @default(autoincrement())
  ApartmentInventory ApartmentInventory?
  CharacterApartment CharacterApartment?
}

model ApartmentInventory {
  id              Int       @id @default(autoincrement())
  fk_Apartment_id Int       @unique
  fk_Inventory_id Int       @unique
  Apartment       Apartment @relation(fields: [fk_Apartment_id], references: [id])
  Inventory       Inventory @relation(fields: [fk_Inventory_id], references: [id])
}

model Business {
  price             Int
  lockState         String
  location          String
  id                Int                @id @default(autoincrement())
  BusinessInventory BusinessInventory?
  CharacterBusiness CharacterBusiness?
}

model BusinessInventory {
  id              Int       @id @default(autoincrement())
  fk_Business_id  Int       @unique
  fk_Inventory_id Int       @unique
  Business        Business  @relation(fields: [fk_Business_id], references: [id])
  Inventory       Inventory @relation(fields: [fk_Inventory_id], references: [id])
}

model Character {
  firstName                                   String
  lastName                                    String
  cash                                        Int
  bank                                        Int
  dead                                        Boolean
  phoneNumber                                 String
  health                                      Int
  armor                                       Int
  arrestTime                                  Int
  dimension                                   Int
  lastPosition                                String
  id                                          Int                 @id @default(autoincrement())
  fk_User_id                                  Int
  User                                        User                @relation(fields: [fk_User_id], references: [id])
  CharacterApartment                          CharacterApartment?
  CharacterBusiness                           CharacterBusiness?
  CharacterHouse                              CharacterHouse?
  CharacterInventory                          CharacterInventory?
  CharacterSkill                              CharacterSkill?
  CharacterVehicle                            CharacterVehicle?
  Contact_CharacterToContact_fk_Character_id  Contact[]           @relation("CharacterToContact_fk_Character_id")
  Contact_CharacterToContact_fk_Character_id1 Contact?            @relation("CharacterToContact_fk_Character_id1")
  Faction                                     Faction?
  FactionMember                               FactionMember?
  Message_CharacterToMessage_fk_Character_id  Message[]           @relation("CharacterToMessage_fk_Character_id")
  Message_CharacterToMessage_fk_Character_id1 Message?            @relation("CharacterToMessage_fk_Character_id1")

  @@index([fk_User_id], name: "fk_User_id")
}

model CharacterApartment {
  id              Int       @id @default(autoincrement())
  fk_Apartment_id Int       @unique
  fk_Character_id Int       @unique
  Apartment       Apartment @relation(fields: [fk_Apartment_id], references: [id])
  Character       Character @relation(fields: [fk_Character_id], references: [id])
}

model CharacterBusiness {
  id              Int       @id @default(autoincrement())
  fk_Character_id Int       @unique
  fk_Business_id  Int       @unique
  Business        Business  @relation(fields: [fk_Business_id], references: [id])
  Character       Character @relation(fields: [fk_Character_id], references: [id])
}

model CharacterHouse {
  id              Int       @id @default(autoincrement())
  fk_House_id     Int       @unique
  fk_Character_id Int       @unique
  Character       Character @relation(fields: [fk_Character_id], references: [id])
  House           House     @relation(fields: [fk_House_id], references: [id])
}

model CharacterInventory {
  id              Int       @id @default(autoincrement())
  fk_Inventory_id Int       @unique
  fk_Character_id Int       @unique
  Character       Character @relation(fields: [fk_Character_id], references: [id])
  Inventory       Inventory @relation(fields: [fk_Inventory_id], references: [id])
}

model CharacterSkill {
  level           Int
  xp              Int
  id              Int       @id @default(autoincrement())
  fk_Character_id Int       @unique
  fk_Skill_id     Int       @unique
  Character       Character @relation(fields: [fk_Character_id], references: [id])
  Skill           Skill     @relation(fields: [fk_Skill_id], references: [id])
}

model CharacterVehicle {
  destroyed         Boolean
  lastPosition      String
  lastRotation      String
  fuel              Int
  dimension         Int
  lockState         String
  numberPlate       String
  id                Int                @id @default(autoincrement())
  fk_Character_id   Int                @unique
  fk_Vehicle_id     Int                @unique
  Character         Character          @relation(fields: [fk_Character_id], references: [id])
  Vehicle           Vehicle            @relation(fields: [fk_Vehicle_id], references: [id])
  VechileInventory  VechileInventory?
  VehicleProperties VehicleProperties?
}

model Contact {
  id                                            Int       @id @default(autoincrement())
  fk_Character_id                               Int
  fk_Character_id1                              Int       @unique
  Character_CharacterToContact_fk_Character_id  Character @relation("CharacterToContact_fk_Character_id", fields: [fk_Character_id], references: [id])
  Character_CharacterToContact_fk_Character_id1 Character @relation("CharacterToContact_fk_Character_id1", fields: [fk_Character_id1], references: [id])

  @@index([fk_Character_id], name: "fk_Character_id")
}

model Faction {
  name             String
  registrationDate DateTime
  id               Int             @id @default(autoincrement())
  fk_Character_id  Int             @unique
  Character        Character       @relation(fields: [fk_Character_id], references: [id])
  FactionMember    FactionMember[]
}

model FactionMember {
  joinDate        DateTime
  id              Int       @id @default(autoincrement())
  fk_Faction_id   Int
  fk_Character_id Int       @unique
  Character       Character @relation(fields: [fk_Character_id], references: [id])
  Faction         Faction   @relation(fields: [fk_Faction_id], references: [id])

  @@index([fk_Faction_id], name: "fk_Faction_id")
}

model House {
  price          Int
  lockState      String
  location       String
  id             Int             @id @default(autoincrement())
  CharacterHouse CharacterHouse?
  HouseInventory HouseInventory?
}

model HouseInventory {
  id              Int       @id @default(autoincrement())
  fk_House_id     Int       @unique
  fk_Inventory_id Int       @unique
  House           House     @relation(fields: [fk_House_id], references: [id])
  Inventory       Inventory @relation(fields: [fk_Inventory_id], references: [id])
}

model Inventory {
  id                 Int                 @id @default(autoincrement())
  ApartmentInventory ApartmentInventory?
  BusinessInventory  BusinessInventory?
  CharacterInventory CharacterInventory?
  HouseInventory     HouseInventory?
  InventoryItem      InventoryItem?
  VechileInventory   VechileInventory?
}

model InventoryItem {
  slot            Int
  amount          Int
  id              Int       @id @default(autoincrement())
  fk_Inventory_id Int       @unique
  fk_Item_id      Int       @unique
  Inventory       Inventory @relation(fields: [fk_Inventory_id], references: [id])
  Item            Item      @relation(fields: [fk_Item_id], references: [id])
}

model Item {
  name          String
  // This type is currently not supported.
  // hash       binary(1)
  weight        Float
  id            Int            @id @default(autoincrement())
  InventoryItem InventoryItem?
}

model LoginHistory {
  date          DateTime
  ip            String
  socialId      String
  // This type is currently not supported.
  // hwidExHash binary(1)
  // This type is currently not supported.
  // hwidHash   binary(1)
  id            Int       @id @default(autoincrement())
  fk_User_id    Int
  User          User      @relation(fields: [fk_User_id], references: [id])

  @@index([fk_User_id], name: "fk_User_id")
}

model Message {
  content                                       String
  date                                          DateTime
  id                                            Int       @id @default(autoincrement())
  fk_Character_id                               Int
  fk_Character_id1                              Int       @unique
  Character_CharacterToMessage_fk_Character_id  Character @relation("CharacterToMessage_fk_Character_id", fields: [fk_Character_id], references: [id])
  Character_CharacterToMessage_fk_Character_id1 Character @relation("CharacterToMessage_fk_Character_id1", fields: [fk_Character_id1], references: [id])

  @@index([fk_Character_id], name: "fk_Character_id")
}

model Skill {
  name           String
  // This type is currently not supported.
  // hash        binary(1)
  maxLevel       Int
  id             Int             @id @default(autoincrement())
  CharacterSkill CharacterSkill?
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")
}

model User {
  username          String?        
  name              String?
  email             String?        @unique
  password          String?
  emailVerified     DateTime?      @map(name: "email_verified")
  emailVerifyToken  String?
  verified          Boolean        @default(false)
  image             String?
  role              Role           @default(USER)
  createdAt         DateTime       @default(now()) @map(name: "created_at")
  updatedAt         DateTime       @default(now()) @map(name: "updated_at")
  id                Int            @id @default(autoincrement())
  Character         Character[]
  LoginHistory      LoginHistory[]
}

enum Role {
  USER
  MOD
  ADMIN
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")
}

model VechileInventory {
  id                     Int              @id @default(autoincrement())
  fk_Inventory_id        Int              @unique
  fk_CharacterVehicle_id Int              @unique
  CharacterVehicle       CharacterVehicle @relation(fields: [fk_CharacterVehicle_id], references: [id])
  Inventory              Inventory        @relation(fields: [fk_Inventory_id], references: [id])
}

model Vehicle {
  name             String
  // This type is currently not supported.
  // hash          binary(1)
  price            Int
  manufacturer     String
  seats            Int
  class            String
  type             String
  maxBraking       Float
  maxBrakingMods   Float
  maxSpeed         Float
  maxTraction      Float
  acceleration     Float
  agility          Float
  maxKnots         Float
  moveResistance   Float
  id               Int               @id @default(autoincrement())
  CharacterVehicle CharacterVehicle?
}

model VehicleProperties {
  id                     Int              @id @default(autoincrement())
  fk_CharacterVehicle_id Int              @unique
  CharacterVehicle       CharacterVehicle @relation(fields: [fk_CharacterVehicle_id], references: [id])
}
