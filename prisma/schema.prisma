generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                   Int       @id @default(autoincrement())
  compoundId           String    @unique @map(name: "compound_id")
  providerType         String    @map(name: "provider_type")
  providerId           String    @map(name: "provider_id")
  providerAccountId    String    @map(name: "provider_account_id")
  refreshToken         String?   @map(name: "refresh_token")
  accessToken          String?   @map(name: "access_token")
  accessTokenExpires   DateTime? @map(name: "access_token_expires")
  fkUserId             Int       @map(name: "user_id")
  fkUser               User      @relation(fields: [fkUserId], references: [id])

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([fkUserId], name: "fk_User_id")

  @@map(name: "accounts")
}

model Apartment {
  id                   Int                  @id @default(autoincrement())
  price                Int
  locked               Boolean
  location             String
  apartmentInventories ApartmentInventory[]
  characterApartment   CharacterApartment?

  @@map(name: "apartments")
}

model ApartmentInventory {
  id              Int       @id @default(autoincrement())
  fkInventoryId   Int       @map(name: "fk_Inventory_id")
  fkApartmentId   Int       @map(name: "fk_Apartment_id")
  Inventory       Inventory @relation(fields: [fkInventoryId], references: [id])
  Apartment       Apartment @relation(fields: [fkApartmentId], references: [id])

  @@index([fkInventoryId], name: "fk_Inventory_id")
  @@index([fkApartmentId], name: "fk_Apartment_id")

  @@map(name: "apartment_inventories")
}

model Business {
  id                  Int                 @id @default(autoincrement())
  price               Int
  locked              Boolean
  location            String
  businessInventories BusinessInventory[]
  characterBusiness   CharacterBusiness?

  @@map(name: "businesses")
}

model BusinessInventory {
  id              Int       @id @default(autoincrement())
  fkInventoryId   Int       @map(name: "fk_Inventory_id")
  fkBusinessId    Int       @map(name: "fk_Business_id")
  Inventory       Inventory @relation(fields: [fkInventoryId], references: [id])
  Business        Business  @relation(fields: [fkBusinessId], references: [id])

  @@index([fkInventoryId], name: "fk_Inventory_id")
  @@index([fkBusinessId], name: "fk_Business_id")

  @@map(name: "business_inventories")
}

model Character {
  id                                          Int                  @id @default(autoincrement())
  firstName                                   String               @map(name: "first_name")
  lastName                                    String               @map(name: "last_name")
  cash                                        Int
  bank                                        Int
  dead                                        Boolean
  phoneNumber                                 String               @map(name: "phone_number")
  health                                      Int
  armor                                       Int
  arrestTime                                  Int                  @map(name: "arrest_time")
  dimension                                   Int
  lastPosition                                String               @map(name: "last_position")
  fkUserId                                    Int
  fkUser                                      User                 @relation(fields: [fkUserId], references: [id])
  characterApartments                         CharacterApartment[]
  characterBusinesses                         CharacterBusiness[]
  characterHouses                             CharacterHouse[]
  characterInventory                          CharacterInventory?
  characterSkills                             CharacterSkill[]
  characterVehicles                           CharacterVehicle[]
  contacts                                    Contact[]            @relation("CharacterToContact_fk_Character_id")
  contacts2                                   Contact[]            @relation("CharacterToContact_fk_Character_id1")
  faction                                     Faction?
  factionMember                               FactionMember?
  messages                                    Message[]            @relation("CharacterToMessage_fk_Character_id")
  messages2                                   Message[]            @relation("CharacterToMessage_fk_Character_id1")

  @@index([fkUserId], name: "fk_User_id")

  @@map(name: "characters")
}

model CharacterApartment {
  id              Int       @id @default(autoincrement())
  fkCharacterId   Int       @map(name: "fk_Character_id")
  fkApartmentId   Int       @unique @map(name: "fk_Apartment_id")
  Character       Character @relation(fields: [fkCharacterId], references: [id])
  Apartment       Apartment @relation(fields: [fkApartmentId], references: [id])

  @@index([fkCharacterId], name: "fk_Character_id")

  @@map(name: "character_apartments")
}

model CharacterBusiness {
  id            Int       @id @default(autoincrement())
  fkCharacterId Int       @map(name: "fk_Character_id")
  fkBusinessId  Int       @unique @map(name: "fk_Business_id")
  Character     Character @relation(fields: [fkCharacterId], references: [id])
  Business      Business  @relation(fields: [fkBusinessId], references: [id])

  @@index([fkCharacterId], name: "fk_Character_id")

  @@map(name: "character_businesses")
}

model CharacterHouse {
  id            Int       @id @default(autoincrement())
  fkCharacterId Int       @map(name: "fk_Character_id")
  fkHouseId     Int       @unique @map(name: "fk_House_id")
  fkCharacter   Character @relation(fields: [fkCharacterId], references: [id])
  fkHouse       House     @relation(fields: [fkHouseId], references: [id])

  @@index([fkCharacterId], name: "fk_Character_id")

  @@map(name: "character_houses")
}

model CharacterInventory {
  id              Int       @id @default(autoincrement())
  fkInventoryId   Int       @map(name: "fk_Inventory_id")
  fkCharacterId   Int       @unique @map(name: "fk_Character_id")
  fkInventory     Inventory @relation(fields: [fkInventoryId], references: [id])
  fkCharacter     Character @relation(fields: [fkCharacterId], references: [id])

  @@index([fkInventoryId], name: "fk_Inventory_id")

  @@map(name: "character_inventories")
}

model CharacterSkill {
  id              Int       @id @default(autoincrement())
  level           Int
  xp              Int
  fkSkillId       Int       @map(name: "fk_Skill_id")
  fkCharacterId   Int       @map(name: "fk_Character_id")
  Skill           Skill     @relation(fields: [fkSkillId], references: [id])
  Character       Character @relation(fields: [fkCharacterId], references: [id])
  
  @@index([fkSkillId], name: "fk_Skill_id")
  @@index([fkCharacterId], name: "fk_Character_id")
  
  @@map(name: "character_skills")
}

model CharacterVehicle {
  id                Int                @id @default(autoincrement())
  destroyed         Boolean
  last_position     String             @map(name: "last_position")
  last_rotation     String             @map(name: "last_rotation")
  fuel              Int
  dimension         Int
  locked            Boolean
  number_plate      String             @map(name: "number_plate")
  fkVehicleId       Int                @map(name: "fk_Vehicle_id")
  fkCharacterId     Int                @map(name: "fk_Character_id")
  fkVehicle         Vehicle            @relation(fields: [fkVehicleId], references: [id])
  fkCharacter       Character          @relation(fields: [fkCharacterId], references: [id])
  vechileInventory  VehicleInventory?
  vehicleProperties VehicleProperties?

  @@index([fkVehicleId], name: "fk_Vehicle_id")
  @@index([fkCharacterId], name: "fk_Character_id")
  
  @@map(name: "character_vehicles")
}

model Contact {
  id             Int       @id @default(autoincrement())
  fkCharacterId1 Int       @map(name: "fk_Character_id")
  fkCharacterId2 Int       @map(name: "fk_Character_id1")
  fkCharacter1   Character @relation("CharacterToContact_fk_Character_id", fields: [fkCharacterId1], references: [id])
  fkCharacter2   Character @relation("CharacterToContact_fk_Character_id1", fields: [fkCharacterId2], references: [id])

  @@index([fkCharacterId1], name: "fk_Character_id")
  @@index([fkCharacterId2], name: "fk_Character_id1")

  @@map(name: "contacts")
}

model Faction {
  id              Int             @id @default(autoincrement())
  name            String
  createdAt       DateTime        @default(now()) @map(name: "created_at")
  fkCharacterId   Int             @unique @map(name: "fk_Character_id")
  fkCharacter     Character       @relation(fields: [fkCharacterId], references: [id])
  factionMembers  FactionMember[]

  @@map(name: "factions")
}

model FactionMember {
  id            Int       @id @default(autoincrement())
  joinedAt      DateTime  @default(now()) @map(name: "joined_at")
  fkCharacterId Int       @unique @map(name: "fk_Character_id")
  fkFactionId   Int       @map(name: "fk_Faction_id")
  fkCharacter   Character @relation(fields: [fkCharacterId], references: [id])
  fkFaction     Faction   @relation(fields: [fkFactionId], references: [id])

  @@index([fkFactionId], name: "fk_Faction_id")

  @@map(name: "faction_members")
}

model House {
  id               Int              @id @default(autoincrement())
  price            Int
  locked           Boolean
  location         String
  characterHouse   CharacterHouse?
  houseInventories HouseInventory[]

  @@map(name: "houses")
}

model HouseInventory {
  id            Int       @id @default(autoincrement())
  fkHouseId     Int       @map(name: "fk_House_id")
  fkInventoryId Int       @map(name: "fk_Inventory_id")
  fkHouse       House     @relation(fields: [fkHouseId], references: [id])
  fkInventory   Inventory @relation(fields: [fkInventoryId], references: [id])

  @@index([fkHouseId], name: "fk_House_id")
  @@index([fkInventoryId], name: "fk_Inventory_id")

  @@map(name: "house_inventories")
}

model Inventory {
  id                   Int                  @id @default(autoincrement())
  apartmentInventories ApartmentInventory[]
  businessInventories  BusinessInventory[]
  characterInventories CharacterInventory[]
  houseInventories     HouseInventory[]
  inventoryItems       InventoryItem[]
  vehicleInventories   VehicleInventory[]

  @@map(name: "inventories")
}

model InventoryItem {
  id            Int       @id @default(autoincrement())
  slot          Int
  amount        Int
  fkInventoryId Int       @map(name: "fk_Inventory_id")
  fkItemId      Int       @map(name: "fk_Item_id")
  Inventory     Inventory @relation(fields: [fkInventoryId], references: [id])
  Item          Item      @relation(fields: [fkItemId], references: [id])

  @@index([fkInventoryId], name: "fk_Inventory_id")
  @@index([fkItemId], name: "fk_Item_id")

  @@map(name: "inventory_items")
}

model Item {
  id             Int             @id @default(autoincrement())
  name           String
  hash           String
  weight         Float
  inventoryItems InventoryItem[]

  @@map(name: "items")
}

model LoginHistory {
  id           Int      @id @default(autoincrement())
  date         DateTime @default(now())
  ip           String
  socialId     String   @map(name: "social_id")
  hwidExHash   String   @map(name: "hwid_ex_hash")
  hwidHash     String   @map(name: "hwid_hash")
  fkUserId     Int      @map(name: "fk_User_id")
  fkUser       User     @relation(fields: [fkUserId], references: [id])

  @@index([fkUserId], name: "fk_User_id")

  @@map(name: "login_histories")
}

model Message {
  id             Int       @id @default(autoincrement())
  content        String
  sent_at        DateTime  @default(now())
  fkCharacterId1 Int       @map(name: "fk_Character_id")
  fkCharacterId2 Int       @map(name: "fk_Character_id1")
  fkCharacter1   Character @relation("CharacterToMessage_fk_Character_id", fields: [fkCharacterId1], references: [id])
  fkCharacter2   Character @relation("CharacterToMessage_fk_Character_id1", fields: [fkCharacterId2], references: [id])

  @@index([fkCharacterId1], name: "fk_Character_id")
  @@index([fkCharacterId2], name: "fk_Character_id1")

  @@map(name: "messages")
}

model RegistrationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime

  @@map(name: "registration_requests")
}

model ResetPasswordRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime

  @@map(name: "reset_password_requests")
}

model Session {
  id           Int      @default(autoincrement()) @id
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  fkUserId     Int      @map(name: "user_id")
  fkUser       User     @relation(fields: [fkUserId], references: [id])

  @@index([fkUserId], name: "fk_User_id")

  @@map(name: "sessions")
}

model Skill {
  id              Int              @id @default(autoincrement())
  name            String
  hash            String
  maxLevel        Int              @map(name: "max_level")
  characterSkills CharacterSkill[]

  @@map(name: "skills")
}

model User {
  username       String?
  name           String?
  email          String?        @unique
  password       String?
  emailVerified  DateTime?      @map(name: "email_verified")
  verified       Boolean?
  image          String?
  createdAt      DateTime       @default(now()) @map(name: "created_at")
  role           Role           @default(USER)
  id             Int            @id @default(autoincrement())
  accounts       Account[]
  characters     Character[]
  loginHistories LoginHistory[]
  sessions       Session[]

  @@map(name: "users")
}

enum Role {
  USER
  MOD
  ADMIN
}

model VehicleInventory {
  id                     Int              @id @default(autoincrement())
  fkCharacterVehicleId   Int              @unique @map(name: "fk_CharacterVehicle_id")
  fkInventoryId          Int              @map(name: "fk_Inventory_id")
  fkCharacterVehicle     CharacterVehicle @relation(fields: [fkCharacterVehicleId], references: [id])
  fkInventory            Inventory        @relation(fields: [fkInventoryId], references: [id])

  @@index([fkInventoryId], name: "fk_Inventory_id")

  @@map(name: "vehicle_inventories")
}

model Vehicle {
  id                Int                @id @default(autoincrement())
  name              String
  hash              String
  price             Int
  manufacturer      String
  seats             Int
  class             String
  type              String
  maxBraking        Float              @map(name: "max_braking")
  maxBrakingMods    Float              @map(name: "max_braking_mods")
  maxSpeed          Float              @map(name: "max_speed")
  maxTraction       Float              @map(name: "max_traction")
  acceleration      Float
  agility           Float
  maxKnots          Float              @map(name: "max_knots")
  moveResistance    Float              @map(name: "move_resistance")
  characterVehicles CharacterVehicle[]

  @@map(name: "vehicles")
}

model VehicleProperties {
  id                   Int              @id @default(autoincrement())
  fkCharacterVehicleId Int              @unique @map(name: "fk_CharacterVehicle_id")
  fkCharacterVehicle   CharacterVehicle @relation(fields: [fkCharacterVehicleId], references: [id])

  @@map(name: "vehicle_properties")
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime

  @@map(name: "verification_requests")
}
